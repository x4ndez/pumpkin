// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Class {
  id         Int          @id @default(autoincrement())
  className  String?
  classType  String
  startTime  DateTime
  endTime    DateTime
  date       DateTime
  recurring  Boolean
  daysActive DaysActive[]
  sessions   Session[]
  createdAt  DateTime     @default(now())
  //make functions:
  // duration (end hours and minutes - start hours and minutes)
}

model Session {
  id        Int         @id @default(autoincrement())
  date      DateTime
  attendees Attendees[]
  Class     Class?      @relation(fields: [classId], references: [id])
  classId   Int?
}

model Attendees {
  id        Int      @id @default(autoincrement())
  Session   Session? @relation(fields: [sessionId], references: [id])
  sessionId Int?
  User      User?    @relation(fields: [userId], references: [id])
  userId    Int?
}

model DaysActive {
  id      Int    @id @default(autoincrement())
  day     String
  class   Class  @relation(fields: [classId], references: [id])
  classId Int
}

model WOD {
  id        Int      @id @default(autoincrement())
  name      String?
  date      DateTime
  content   String?
  type      String?
  createdAt DateTime @default(now())
}

model User {
  id            Int         @id @default(autoincrement())
  email         String      @unique
  name          String
  password      String
  classesBooked Int         @default(0)
  bio           String?
  proficiency   String?     @default("Newbie")
  permissions   String      @default("user")
  accountActive Boolean     @default(false)
  createdAt     DateTime    @default(now())
  attendeeOf    Attendees[]
  posts         Post[]
  comments      Comment[]
}

model Post {
  id        Int       @id @default(autoincrement())
  content   String
  likes     Int       @default(0)
  createdAt DateTime  @default(now())
  createdBy User      @relation(fields: [userId], references: [id])
  userId    Int
  comments  Comment[]
}

model Comment {
  id        Int      @id @default(autoincrement())
  content   String
  likes     Int      @default(0)
  createdAt DateTime @default(now())
  createdBy User     @relation(fields: [userId], references: [id])
  userId    Int
  Post      Post?    @relation(fields: [postId], references: [id])
  postId    Int?
}
